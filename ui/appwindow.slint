import { GridBox, StandardButton, Button } from "std-widgets.slint";
import { CheckBox, ComboBox, TextEdit, ScrollView } from "std-widgets.slint";

export component Office inherits Window {
    in-out property <int> counter: 42;
    callback start_prg(string, string, string);
    callback open_dialog();
    callback program_selected(string);
    callback addon_selected(string);
    in property <[string]> programs;
    in-out property <bool> programs-enabled: false;
    in-out property <[string]> addons;
    in-out property <bool> start-enabled: false;
    in-out property <string> output_text: "If the add-on does not work: \n    Please select the program and select initialize.";
    in-out property <string> file_path: "No file selected";
    in-out property <string> sel_program;
    in-out property <string> sel_addon;
    min-width: 500px;
    min-height: 600px;
    title: "Example GUI";
    VerticalLayout {
        HorizontalLayout {
            alignment: center;
            padding: 10px;
            Text {
                text: "Office Template Helper";
            }
        }

        FileSelector := HorizontalLayout {
            padding-top: 40px;
            width: 100%;
            Button {
                min-width: 150px;
                min-height: 25px;
                text: "Open File";
                clicked => {
                    root.open_dialog();
                }
            }

            Text {
                text: file_path;
                // checked: false;
            }
        }

        labeled := HorizontalLayout {
            padding-bottom: 0px;
            padding: 10px;
            width: 100%;
            height: 5%;
            Text {
                text: "Program:";
            }

            Text {
                text: "Add-On:";
            }
        }

        settings := HorizontalLayout {
            padding-top: 0px;
            padding-left: 30px;
            padding-right: 30px;
            width: 100%;
            height: 10%;
            GridBox {
                ComboBox {
                    model: programs;
                    enabled: true;
                    current-value: programs[0];
                    selected(selected) => {
                        root.addons = ["None"];
                        root.program_selected(selected);
                        root.programs-enabled = true;
                        root.sel_program = selected;
                    }
                }

                ComboBox {
                    model: addons;
                    enabled: programs-enabled;
                    selected(addon_selected) => {
                        root.addon_selected(addon_selected);
                        root.start-enabled = true;
                        root.sel_addon = addon_selected;
                    }
                }
            }
        }

        logger := HorizontalLayout {
            padding-top: 10px;
            //width: 100%;
                ScrollView {
                padding-top: 10px;
                TextEdit {
                    min-width: 490px;
                    min-height: 150px;
                    text: output_text;
                }
            }
        }

        HorizontalLayout {
            padding-left: 50px;
            padding-right: 30px;
            padding-top: 10px;
            padding-bottom: 20px;
            alignment: space-between;
            Rectangle {
                width: 100px;
            }

            Button {
                width: 40%;
                //height: 20px;
                text: "Start";
                enabled: start-enabled;
                clicked => {
                    start_prg(file_path, sel_program, sel_addon);
                }
            }

            CheckBox {
                text: ": Enable Option ";
                checked: false;
            }
        }

        HorizontalLayout {
            alignment: space-between;
            Text {
                text: "version: 1.0.0";
            }

            //Text {text: "Â© 2024";}
            Text {
                text: "Made with Slint";
            }
        }
    }
}
